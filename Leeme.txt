 ##############################----------PARA EMPEZAR----------##############################

sudo apt-get install libsfml-dev
sudo apt-get install cmake
sudo apt-get install gcc 
– Versiones
Para comprobar cual está instalada:
apt-cache policy libsfml-dev
gcc --version
cmake --version

#######################################################################################################################################

Si estas en Ubuntu tambien se puede compilar desde terminal con los siguientes pasos.



sudo apt-get install gcc              // instalar libreria de c++
gcc -- version                        // aqui deberia salirte la version   
code main.cpp                         // aqui se crea el archivo cpp abriendolo en Visual Studio Code
gcc main.cpp -o nombreEjecutable      // comando para compilar main.cpp con gcc y poner nombre al ejecutable con -0
./nombreEjecutable                    // ejecutar ejecutable


#########################################################################################################

En esta plantilla ya esta creado para que se auto gestione con MakeFile, solo habrá que añadir clases como en el ejemplo de "ej_modules", es decir,
crear una carpeta con un CMakeLists.txt que contenga el .cpp y enlanzarlo en el CMakeLists.txt Principal -->
--------------------------------
|| add_library(libModulos STATIC) ||
|| add_subdirectory(ej_modulos)   ||
 
||target_link_libraries(Prueba libModulos) ||
-------------------------------
Si salta error en BUILD es cosa de Cmakelists 


Si se quieren crear varios ejecutables tiene que estar tanto en "launch.json" como en CMakeLists.txt (principal) Lo pondre comentado.

si el .json da problemas comprobar "MIMode": "gdb" gdb puede ser lldb otro compilador de c++

##########################################################################################
###############




//////////////////////////////////////// COMANDOS GITHUB ///////////////////////////////////

git init   // crear repositorio

git config --global push.default matching  //para enlazar github version antigua (recomendado)

git remote add origin https://github.com/NOMBRE_USUARIO_GIT/NOMBRE_REPOSITORIO.git // enlazar repositorio

git push -u origin master

git clone //clonar

git pull // descargar lo que hay

git push // cargar lo que hay

git commit -am "nombre del commit" // hacer un commit

git add * //añadir todos cambios de los que vas a hacer commit

git fetch // para actualizar en la nube

git checkout nombreDeLaRama // cambiar de rama

git checkout -b nombreDeLaRama // crear y mover a esa rama

git merge nombreDeLaRama // para mezclar codigo de una rama a la tuya

git reset --hard // quitar todo, poner lo de la nube de nuevo

git branch // te dice en que carpeta estas de la rama

git branch nombre // te mueve a esa rama

1.- git commit -m "nombre"

//no va******
1.1.- git add *
1.2.- git status // si hay algo en rojo
1.3.- git add "nombre en rojo"
1-4.- git commit -m "nombre" //otra vez

2.- git push (subir)// git pull (descargar) 
!!!!!!!!!!!!!!!!!!!!!!!!!! //NOTA !!!!!!!!!!!!!!!!!!!!!!!!!!!! 
Cuando se hace pull, se borra la carpeta "build" --> se va Vscode Cmake --> "Configure all Projects" (te crea el build) Y ya puedes compilar
2.2 se puede crear un archivo .gitignore con dentro "/build" para que no suba build y no tener que hacer el punto 2.